<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC
        "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cpt202.mapper.SongMapper">
    <resultMap id="BaseResultMap" type="com.cpt202.domain.Song">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="introduction" jdbcType="VARCHAR"
                property="introduction"/>
        <result column="create_time" jdbcType="TIMESTAMP"
                property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP"
                property="updateTime"/>
        <result column="pic" jdbcType="VARCHAR" property="pic"/>
        <result column="url" jdbcType="VARCHAR" property="url"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="user_id" jdbcType="INTEGER" property="userId"/>
    </resultMap>

    <resultMap id="ResultMapWithBLOBs" type="com.cpt202.domain.Song"
               extends="BaseResultMap">
        <result column="lyric" jdbcType="LONGVARCHAR" property="lyric"/>
    </resultMap>

    <!-- 新增：定义 SongDTO 的 ResultMap -->
    <resultMap id="SongDTOResultMap" type="com.cpt202.dto.SongDTO" extends="ResultMapWithBLOBs">
        <!-- Base Song fields are inherited from ResultMapWithBLOBs -->
        
        <!-- Mappings for additional fields in SongDTO -->
        <!-- 这些字段的值需要在相应的 SELECT 语句中通过 JOIN 或子查询提供 -->
        <!-- 如果查询不直接提供这些列，MyBatis 不会填充它们，除非使用 association/collection -->
        
        <!-- 假设 SELECT 语句会返回这些聚合/连接后的列 -->
        <result column="category_names" jdbcType="VARCHAR" property="categoryNames"/> 
        <result column="tag_names" jdbcType="VARCHAR" property="tagNames"/>
        <result column="singer_names" jdbcType="VARCHAR" property="singerNames"/>
        
        <!-- 列表字段通常通过 <collection> 映射处理，需要特定的查询 -->
        <!-- 如果你的查询直接返回逗号分隔的 ID 字符串，可以使用上面的 VARCHAR 映射 -->
        <!-- 如果你想映射成 List<Integer>，需要更复杂的 resultMap 或在 Service 层处理 -->
        <!-- 这里暂时不添加 collection 映射，假设 Service 层会处理 ID 列表 -->
    </resultMap>

    <sql id="Base_Column_List">
        id
        ,name,introduction,create_time,update_time,pic,url,status,user_id
    </sql>

    <sql id="Blob_Column_List">
        id
        ,name,introduction,create_time,update_time,pic,lyric,url,status,user_id
    </sql>

    <insert id="insert" parameterType="com.cpt202.domain.Song" useGeneratedKeys="true" keyProperty="id">
        insert into song
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="introduction != null">
                introduction,
            </if>
            create_time,update_time,
            <if test="pic != null">
                pic,
            </if>
            <if test="lyric != null">
                lyric,
            </if>
            <if test="url != null">
                url,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="album != null">
                album,
            </if>
        </trim>
        <trim prefix=" values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id},
            </if>
            <if test="userId != null">
                #{userId},
            </if>
            <if test="name != null">
                #{name},
            </if>
            <if test="introduction != null">
                #{introduction},
            </if>
            now(),now(),
            <if test="pic != null">
                #{pic},
            </if>
            <if test="lyric != null">
                #{lyric},
            </if>
            <if test="url != null">
                #{url},
            </if>
            <if test="status != null">
                #{status},
            </if>
            <if test="album != null">
                #{album},
            </if>
        </trim>
    </insert>

    <update id="update" parameterType="com.cpt202.domain.Song">
        update song
        <set>
            <!-- Update name only if provided and not null -->
            <if test="name != null">
                name = #{name},
            </if>
            <!-- Update introduction only if provided and not null -->
            <if test="introduction != null">
                introduction = #{introduction},
            </if>
            <!-- Always update the update_time -->
            update_time = now(),
            <!-- Update lyric only if provided and not null -->
            <if test="lyric != null">
                lyric = #{lyric},
            </if>
            <!-- Update status only if provided and not null (though typically handled by audit) -->
            <if test="status != null">
                status = #{status},
            </if>
            <!-- Update album only if provided and not null -->
            <if test="album != null">
                album = #{album},
            </if>
        </set>
        where id = #{id}
    </update>

    <update id="updateStatus">
        update song set status = #{status}, update_time = now() where id = #{songId}
    </update>

    <delete id="delete" parameterType="java.lang.Integer">
        delete
        from song
        where id = #{id}
    </delete>

    <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs"
            parameterType="java.lang.Integer">
        select
        <include refid="Blob_Column_List"/>
        from song
        where id=#{id}
    </select>

    <select id="allSong" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Blob_Column_List"/>
        from song
    </select>

    <select id="getPendingSongs" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Blob_Column_List"/>
        from song
        where status = 0
    </select>
    
    <select id="getAuditedSongs" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer">
        select 
        <include refid="Blob_Column_List"/>
        from song
        where status = #{status}
    </select>

    <!-- 查询播放次数排前列的歌曲 (REMOVED) -->
<!--    <select id="topSong" resultMap="ResultMapWithBLOBs">-->
<!--        select-->
<!--        <include refid="Blob_Column_List"/>-->
<!--        from song-->
        <!-- ORDER BY nums DESC --> <!-- 原来的排序依据 -->
<!--        order by create_time desc-->
<!--    </select>-->

    <select id="songOfName" resultMap="ResultMapWithBLOBs"
            parameterType="java.lang.String">
        select
        <include refid="Blob_Column_List"/>
        from song
        where name = #{name}
    </select>

    <select id="likeSongOfName" resultMap="ResultMapWithBLOBs"
            parameterType="java.lang.String">
        select
        <include refid="Blob_Column_List"/>
        from song
        where name like #{name}
    </select>

    <select id="songOfUserId" resultMap="ResultMapWithBLOBs"
            parameterType="java.lang.Integer">
        select
        <include refid="Blob_Column_List"/>
        from song
        where user_id = #{userId}
    </select>
    
    <select id="selectUserSongsByCategory" resultMap="ResultMapWithBLOBs">
        SELECT 
            s.*
        FROM 
            song s
        INNER JOIN 
            song_category sc ON s.id = sc.song_id
        WHERE 
            s.user_id = #{userId} AND sc.category_id = #{categoryId}
    </select>

    <!-- 新增：根据用户ID、分类、状态、搜索词查询歌曲 -->
    <select id="searchUserSongs" resultMap="ResultMapWithBLOBs">
        SELECT DISTINCT s.*
        FROM song s
        <!-- 如果需要按分类过滤，需要连接 song_category 表 -->
        <if test="categoryId != null">
            LEFT JOIN song_category sc ON s.id = sc.song_id
        </if>
        <!-- 使用 <where> 标签自动处理开头的 AND/OR -->
        <where> 
            <!-- 仅当 userId 不为 null 时才应用 user_id 过滤 -->
            <if test="userId != null">
                s.user_id = #{userId}
            </if>
            <if test="categoryId != null">
                AND sc.category_id = #{categoryId}
            </if>
            <if test="status != null">
                AND s.status = #{status}
            </if>
            <if test="searchTerm != null and searchTerm != ''">
                AND s.name LIKE CONCAT('%', #{searchTerm}, '%') 
            </if>
        </where>
        ORDER BY s.create_time DESC
    </select>

    <!-- Calculate Total Songs -->
    <select id="countTotalSongs" resultType="long">
        SELECT COUNT(*) FROM song
    </select>

    <!-- Calculate Songs by Status -->
    <select id="countSongsByStatus" resultType="long">
        SELECT COUNT(*) FROM song WHERE status = #{status}
    </select>

    <!-- 统计：用户总歌曲数 -->
    <select id="countTotalSongsByUserId" resultType="java.lang.Long">
        SELECT COUNT(*)
        FROM song
        WHERE user_id = #{userId}
    </select>

    <!-- 统计：用户特定状态歌曲数 -->
    <select id="countSongsByUserIdAndStatus" resultType="java.lang.Long">
        SELECT COUNT(*)
        FROM song
        WHERE user_id = #{userId} AND status = #{status}
    </select>

    <!-- 统计：用户歌曲总数 -->
    <select id="countSongsByUserId" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM song WHERE user_id = #{userId}
    </select>

    <!-- ==================== Added Statements ==================== -->

    <!-- 更新歌曲封面图片 -->
    <update id="updatePic" parameterType="com.cpt202.domain.Song">
        UPDATE song
        SET pic = #{pic,jdbcType=VARCHAR},
            update_time = now()
        WHERE id = #{id,jdbcType=INTEGER}
    </update>

    <!-- 更新歌曲文件URL -->
    <update id="updateUrl" parameterType="com.cpt202.domain.Song">
        UPDATE song
        SET url = #{url,jdbcType=VARCHAR},
            update_time = now()
        WHERE id = #{id,jdbcType=INTEGER}
    </update>

    <!-- 更新歌曲MV文件URL (假设Song实体没有mvUrl字段，直接更新) -->
    <update id="updateMVUrlById">
        UPDATE song
        SET mvurl = #{mvUrl,jdbcType=VARCHAR},  <!-- 假设数据库字段名为 mvurl -->
            update_time = now()
        WHERE id = #{id,jdbcType=INTEGER}
    </update>

    <!-- 根据类别ID查询歌曲列表 -->
    <select id="selectSongsByCategoryId" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer">
        SELECT s.*
        FROM song s
        JOIN song_category sc ON s.id = sc.song_id
        WHERE sc.category_id = #{categoryId,jdbcType=INTEGER}
        <!-- 你可能需要添加额外的过滤条件，例如歌曲状态 -->
        <!-- AND s.status = 1 -->
        ORDER BY s.create_time DESC
    </select>

    <!-- 根据用户ID分页查询歌曲，并包含类别、标签、歌手信息 -->
    <select id="selectSongsByUserIdPaged" resultMap="SongDTOResultMap">
        SELECT
        <!-- ... existing xml ... -->
    </select>

    <!-- 实现管理页面的歌曲分页查询，支持按名称、用户ID和状态筛选 -->
    <select id="selectPage" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Blob_Column_List"/>
        from song
        <where>
            <if test="name != null and name != ''">
                and name like concat('%', #{name}, '%')
            </if>
            <if test="userId != null">
                and user_id = #{userId}
            </if>
            <if test="status != null">
                and status = #{status}
            </if>
        </where>
        order by create_time desc
    </select>

</mapper>
















